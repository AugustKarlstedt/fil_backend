#include <herring2/detail/infer/cpu_predict.cuh>
#include <kayak/device_type.hpp>
#include <kayak/tree.hpp>

namespace herring {
namespace detail {
namespace inference {

// double IO, single threshold, many features
template void predict<kayak::device_type::cpu, forest<kayak::tree_layout::depth_first, float, uint32_t, uint16_t, uint32_t, float, false>, double>(forest<kayak::tree_layout::depth_first, float, uint32_t, uint16_t, uint32_t, float, false> const&, kayak::data_array<kayak::data_layout::dense_row_major, double>&, kayak::data_array<kayak::data_layout::dense_row_major, double> const&, kayak::raw_index_t, element_op, row_op, double, double, double, int, kayak::cuda_stream);
template void predict<kayak::device_type::cpu, forest<kayak::tree_layout::depth_first, float, uint32_t, uint16_t, uint32_t, float, true>, double>(forest<kayak::tree_layout::depth_first, float, uint32_t, uint16_t, uint32_t, float, true> const&, kayak::data_array<kayak::data_layout::dense_row_major, double>&, kayak::data_array<kayak::data_layout::dense_row_major, double> const&, kayak::raw_index_t, element_op, row_op, double, double, double, int, kayak::cuda_stream);
template void predict<kayak::device_type::cpu, forest<kayak::tree_layout::depth_first, float, uint32_t, uint16_t, uint32_t, double, false>, double>(forest<kayak::tree_layout::depth_first, float, uint32_t, uint16_t, uint32_t, double, false> const&, kayak::data_array<kayak::data_layout::dense_row_major, double>&, kayak::data_array<kayak::data_layout::dense_row_major, double> const&, kayak::raw_index_t, element_op, row_op, double, double, double, int, kayak::cuda_stream);
template void predict<kayak::device_type::cpu, forest<kayak::tree_layout::depth_first, float, uint32_t, uint16_t, uint32_t, double, true>, double>(forest<kayak::tree_layout::depth_first, float, uint32_t, uint16_t, uint32_t, double, true> const&, kayak::data_array<kayak::data_layout::dense_row_major, double>&, kayak::data_array<kayak::data_layout::dense_row_major, double> const&, kayak::raw_index_t, element_op, row_op, double, double, double, int, kayak::cuda_stream);
template void predict<kayak::device_type::cpu, forest<kayak::tree_layout::depth_first, float, uint32_t, uint16_t, uint32_t, uint32_t, false>, double>(forest<kayak::tree_layout::depth_first, float, uint32_t, uint16_t, uint32_t, uint32_t, false> const&, kayak::data_array<kayak::data_layout::dense_row_major, double>&, kayak::data_array<kayak::data_layout::dense_row_major, double> const&, kayak::raw_index_t, element_op, row_op, double, double, double, int, kayak::cuda_stream);
template void predict<kayak::device_type::cpu, forest<kayak::tree_layout::depth_first, float, uint32_t, uint16_t, uint32_t, uint32_t, true>, double>(forest<kayak::tree_layout::depth_first, float, uint32_t, uint16_t, uint32_t, uint32_t, true> const&, kayak::data_array<kayak::data_layout::dense_row_major, double>&, kayak::data_array<kayak::data_layout::dense_row_major, double> const&, kayak::raw_index_t, element_op, row_op, double, double, double, int, kayak::cuda_stream);
template void predict<kayak::device_type::cpu, forest<kayak::tree_layout::depth_first, float, uint32_t, uint32_t, uint32_t, float, false>, double>(forest<kayak::tree_layout::depth_first, float, uint32_t, uint32_t, uint32_t, float, false> const&, kayak::data_array<kayak::data_layout::dense_row_major, double>&, kayak::data_array<kayak::data_layout::dense_row_major, double> const&, kayak::raw_index_t, element_op, row_op, double, double, double, int, kayak::cuda_stream);
template void predict<kayak::device_type::cpu, forest<kayak::tree_layout::depth_first, float, uint32_t, uint32_t, uint32_t, float, true>, double>(forest<kayak::tree_layout::depth_first, float, uint32_t, uint32_t, uint32_t, float, true> const&, kayak::data_array<kayak::data_layout::dense_row_major, double>&, kayak::data_array<kayak::data_layout::dense_row_major, double> const&, kayak::raw_index_t, element_op, row_op, double, double, double, int, kayak::cuda_stream);
template void predict<kayak::device_type::cpu, forest<kayak::tree_layout::depth_first, float, uint32_t, uint32_t, uint32_t, double, false>, double>(forest<kayak::tree_layout::depth_first, float, uint32_t, uint32_t, uint32_t, double, false> const&, kayak::data_array<kayak::data_layout::dense_row_major, double>&, kayak::data_array<kayak::data_layout::dense_row_major, double> const&, kayak::raw_index_t, element_op, row_op, double, double, double, int, kayak::cuda_stream);
template void predict<kayak::device_type::cpu, forest<kayak::tree_layout::depth_first, float, uint32_t, uint32_t, uint32_t, double, true>, double>(forest<kayak::tree_layout::depth_first, float, uint32_t, uint32_t, uint32_t, double, true> const&, kayak::data_array<kayak::data_layout::dense_row_major, double>&, kayak::data_array<kayak::data_layout::dense_row_major, double> const&, kayak::raw_index_t, element_op, row_op, double, double, double, int, kayak::cuda_stream);
template void predict<kayak::device_type::cpu, forest<kayak::tree_layout::depth_first, float, uint32_t, uint32_t, uint32_t, uint32_t, false>, double>(forest<kayak::tree_layout::depth_first, float, uint32_t, uint32_t, uint32_t, uint32_t, false> const&, kayak::data_array<kayak::data_layout::dense_row_major, double>&, kayak::data_array<kayak::data_layout::dense_row_major, double> const&, kayak::raw_index_t, element_op, row_op, double, double, double, int, kayak::cuda_stream);
template void predict<kayak::device_type::cpu, forest<kayak::tree_layout::depth_first, float, uint32_t, uint32_t, uint32_t, uint32_t, true>, double>(forest<kayak::tree_layout::depth_first, float, uint32_t, uint32_t, uint32_t, uint32_t, true> const&, kayak::data_array<kayak::data_layout::dense_row_major, double>&, kayak::data_array<kayak::data_layout::dense_row_major, double> const&, kayak::raw_index_t, element_op, row_op, double, double, double, int, kayak::cuda_stream);

}
}
}
